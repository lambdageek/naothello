<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <PublishAot>true</PublishAot>
    <SelfContained>true</SelfContained>
  </PropertyGroup>
  <PropertyGroup Condition="'$(NativeLib)' == ''">
    <!-- if not explicitly set, build a static lib everywhere by default, except on Windows in debug config-->
    <NativeLib Condition="'$(OS)' == 'Windows_NT' and '$(Configuration)' == 'Debug'">shared</NativeLib>
    <NativeLib Condition="'$(NativeLib)' == ''">static</NativeLib>
  </PropertyGroup>

  <PropertyGroup>
    <!-- in net9.0 we can do this -->
    <SharedLibraryInstallName>@rpath/$(MSBuildProjectName).dylib</SharedLibraryInstallName>
  </PropertyGroup>

  <!-- borrow from dotnet/runtime's DotNetBuild.props-->
  <PropertyGroup>
    <_hostRid>$([System.Runtime.InteropServices.RuntimeInformation]::RuntimeIdentifier)</_hostRid>
    <!-- TargetRid names what gets built. -->
    <TargetRid Condition="'$(TargetRid)' == ''">$(_hostRid)</TargetRid>

    <!-- Split e.g. 'fedora.33-x64' into 'fedora.33' and 'x64'. -->
    <_targetRidPlatformIndex>$(TargetRid.LastIndexOf('-'))</_targetRidPlatformIndex>
    <TargetArch>$(TargetRid.Substring($(_targetRidPlatformIndex)).TrimStart('-'))</TargetArch>
    <TargetOS>$(TargetRid.Substring(0, $(_targetRidPlatformIndex)))</TargetOS>
  </PropertyGroup>

  <PropertyGroup>
      <StaticLibExt Condition="'$(OS)' != 'Windows_NT'">a</StaticLibExt>
      <StaticLibExt Condition="'$(OS)' == 'Windows_NT'">lib</StaticLibExt>
      <DynamicLibExt Condition="'$(OS)' == 'Windows_NT'">dll</DynamicLibExt>
      <DynamicImpLibExt Condition="'$(OS)' == 'Windows_NT'">lib</DynamicImpLibExt>
      <DynamicLibExt Condition="'$(TargetOS)' == 'osx'">dylib</DynamicLibExt>
      <DynamicLibExt Condition="'$(DynamicLibExt)' == ''">so</DynamicLibExt>
  </PropertyGroup>

  <!-- From https://migeel.sk/blog/2024/01/02/building-a-self-contained-game-in-csharp-under-2-kilobytes/ -->
  <PropertyGroup>
      <OptimizationPreference>Size</OptimizationPreference>
      <StackTraceSupport>false</StackTraceSupport>
      <InvariantGlobalization>true</InvariantGlobalization>
      <UseSystemResourceKeys>true</UseSystemResourceKeys>
  </PropertyGroup>

  <!-- workaround https://github.com/dotnet/runtime/issues/95100 -->
  <PropertyGroup>
      <IlcGenerateWin32Resources>false</IlcGenerateWin32Resources>
  </PropertyGroup>

  <Target Name="WriteConfigurationStatic" DependsOnTargets="SetupProperties" AfterTargets="Publish" Condition="'$(NativeLib)' == 'static'">
      <PropertyGroup>
          <LibArtifactLibPath>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)/$(PublishDir)'))</LibArtifactLibPath>
          <LibArtifactFullPath>$([System.IO.Path]::GetFullPath('$(LibArtifactLibPath)libnaothello.$(StaticLibExt)'))</LibArtifactFullPath>
          <LibArtifactIlcFrameworkPath>$(IlcFrameworkPath.TrimEnd('\\/'))</LibArtifactIlcFrameworkPath>
          <LibArtifactIlcSdkPath>$(IlcSdkPath.TrimEnd('\\/'))</LibArtifactIlcSdkPath>
      </PropertyGroup>
      <!-- escape backslashes in windows-style paths to make cmake happy -->
      <PropertyGroup Condition="'$(OS)' == 'Windows_NT'">
        <LibArtifactLibPath>$(LibArtifactLibPath.Replace('\', '\\'))</LibArtifactLibPath>
        <LibArtifactFullPath>$(LibArtifactFullPath.Replace('\', '\\'))</LibArtifactFullPath>
        <LibArtifactIlcFrameworkPath>$(LibArtifactIlcFrameworkPath.Replace('\', '\\'))</LibArtifactIlcFrameworkPath>
        <LibArtifactIlcSdkPath>$(LibArtifactIlcSdkPath.Replace('\', '\\'))</LibArtifactIlcSdkPath>
      </PropertyGroup>
      <ItemGroup>
          <ConfigToWrite Include="set(LIBNAOTHELLO_MODE &quot;static&quot;)" />
          <ConfigToWrite Include="set(LIBNAOTHELLO_LIBPATH &quot;$(LibArtifactLibPath.TrimEnd('\\/'))&quot;)" />
          <ConfigToWrite Include="set(LIBNAOTHELLO_PATH &quot;$(LibArtifactFullPath.TrimEnd('\\/'))&quot;)" />
          <ConfigToWrite Include="set(NATIVEAOT_FRAMEWORK_PATH &quot;$(LibArtifactIlcFrameworkPath)&quot;)" />
          <ConfigToWrite Include="set(NATIVEAOT_SDK_PATH &quot;$(LibArtifactIlcSdkPath)&quot;)" />
      </ItemGroup>
      <WriteLinesToFile File="$(BaseOutputPath)libnaothello.cmake"
                        Lines="@(ConfigToWrite)"
                        WriteOnlyWhenDifferent="true"
                        Overwrite="true"/>
  </Target>
  <Target Name="WriteConfigurationShared" DependsOnTargets="SetupProperties" AfterTargets="Publish" Condition="'$(NativeLib)' == 'shared'">
      <PropertyGroup Condition="'$(OS)' == 'Windows_NT'">
          <!-- the import lib is in the native sub-directory, not publish-->
          <_NativeBinaryPath>$([System.IO.Path]::GetDirectoryName('$(NativeBinary)'))/</_NativeBinaryPath>
          <_NativeBinaryPath>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)/$(_NativeBinaryPath)'))</_NativeBinaryPath>
          <LibArtifactImpLibFullPath>$([System.IO.Path]::GetFullPath('$(_NativeBinaryPath)libnaothello.$(DynamicImpLibExt)'))</LibArtifactImpLibFullPath>
      </PropertyGroup>
      <PropertyGroup>
          <LibArtifactLibPath>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)/$(PublishDir)'))</LibArtifactLibPath>
          <LibArtifactFullPath>$([System.IO.Path]::GetFullPath('$(LibArtifactLibPath)libnaothello.$(DynamicLibExt)'))</LibArtifactFullPath>
      </PropertyGroup>
      <!-- escape backslashes in windows-style paths to make cmake happy -->
      <PropertyGroup Condition="'$(OS)' == 'Windows_NT'">
        <LibArtifactLibPath>$(LibArtifactLibPath.Replace('\', '\\'))</LibArtifactLibPath>
        <LibArtifactImpLibFullPath>$(LibArtifactImpLibFullPath.Replace('\', '\\'))</LibArtifactImpLibFullPath>
        <LibArtifactFullPath>$(LibArtifactFullPath.Replace('\', '\\'))</LibArtifactFullPath>
      </PropertyGroup>
      <ItemGroup>
          <ConfigToWrite Include="set(LIBNAOTHELLO_MODE &quot;shared&quot;)" />
          <ConfigToWrite Include="set(LIBNAOTHELLO_LIBPATH &quot;$(LibArtifactLibPath.TrimEnd('\\/'))&quot;)" />
          <ConfigToWrite Include="set(LIBNAOTHELLO_IMPLIBPATH &quot;$(LibArtifactImpLibFullPath.TrimEnd('\\/'))&quot;)" Condition="'$(OS)' == 'Windows_NT'"/>
          <ConfigToWrite Include="set(LIBNAOTHELLO_PATH &quot;$(LibArtifactFullPath.TrimEnd('\\/'))&quot;)" />
      </ItemGroup>
      <WriteLinesToFile File="$(BaseOutputPath)libnaothello.cmake"
                        Lines="@(ConfigToWrite)"
                        WriteOnlyWhenDifferent="true"
                        Overwrite="true"/>
  </Target>

  <Target Name="ChangeInstallName" DependsOnTargets="WriteConfigurationShared" AfterTargets="CopyNativeBinary" Condition="'$(NativeLib)' == 'shared' and '$(TargetOS)' == 'osx'">
      <Message Importance="High" Text="Runing install_name_tool -id $(SharedLibraryInstallName) $(LibArtifactFullPath)" />
      <Exec Command="install_name_tool -id $(SharedLibraryInstallName) $(LibArtifactFullPath)" />
  </Target>
  
</Project>
